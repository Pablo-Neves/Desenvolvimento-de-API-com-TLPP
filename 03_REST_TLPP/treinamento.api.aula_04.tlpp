#include 'totvs.ch'
#include 'tlpp-core.th'

NAMESPACE treinamento.api



/*/{Protheus.doc} U_GET_FORNECEDORES
    Busca lista de fornecedores
    @type  FUNCTION
    @author Pablo Neves
    @since 01/05/2024
    @see https://tdn.totvs.com/display/public/framework/09.+Fwadapterbasev2
    /*/
@get(endpoint='/treinamento/listafornecedores', description='Listagem de clientes com passagem de parametros via querystring')
Function U_GET_FORNECEDORES as logical 
    
    Local lRPC                  as logical 
    Local nError                as numeric 
    Local cError                as character 
    Local jQueryStr             as json    
    Local jResp                 as json 
    Local oAdapter              as object 
    Local cSQL                  as character
    Local cWhere                as character
    Local cEstado               as character
    Local cCidade               as character 
    Local nSize                 as numeric  
    Local npage                 as numeric 
    Local cOrder                as character
    Local cSearch               as character


    If type('cEmpAnt') <> 'C'
        rpcSetEnv('99','01')
        lRPC := .T.
    Endif

    try
        jQueryStr       :=  oRest:getQueryRequest() // recebe parametros passado pela api 

        cEstado                 := jQueryStr['estado']
        cCidade                 := jQueryStr['cidade']
        nSize                   := jQueryStr['pageSize']
        npage                   := jQueryStr['page']
        cOrder                  := jQueryStr['order']
        cSearch                 := jQueryStr['search']

        nSize                   := IIF(Empty(nSize),10,nSize)
        nPage                   := IIF(Empty(nPage),1,nPage)

        
        cSQL                    := " SELECT #QueryFields# FROM " + RetSqlName("SA2") + " SA2 "
        cSQL                    += CRLF + " WHERE #QueryWhere# "

        cWhere                  := " D_E_L_E_T_ = '' "

        If !Empty(cEstado)
            cWhere              += CRLF + " AND A2_ESTADO = '"    +   cEstado +   "' "
        EndIf

        If !Empty(cCidade)
            cWhere              += CRLF + " AND A2_MUN  LIKE '%"  +   cEstado +   "%' "
        EndIf

        If !Empty(cSearch)
            cWhere              += CRLF + " AND A2_NOME LIKE '%"  +   cSearch +   "%' ""
        Endif 

        
            oAdapter        := FwAdapterBaseV2():new('GET',.T.) // classe usada para criação de paginação API
            oAdapter        :addMapFields('cod'         ,'A2_COD'       ,.T.,.T.,{'A2_COD','C',06,00},'SA2.A2_COD') // array preenchido apenas quando campo nao faz parte da SX3
            oAdapter        :addMapFields('loja'        ,'A2_LOJA'      ,.T.) 
            oAdapter        :addMapFields('nome'        ,'A2_NOME'      ,.T.) 
            oAdapter        :addMapFields('fantasia'    ,'A2_NREDUZ'    ,.T.) 
            oAdapter        :addMapFields('endereco'    ,'A2_END'       ,.T.)

            oAdapter        :setQuery(cSQL) 
            oAdapter        :setWhere(cWhere)
            oAdapter        :setPageSize(nSize)
            oAdapter        :setPage(nPage)
            oAdapter        :setOrder(cOrder)

            IF oAdapter        :execute()

                oAdapter:fillGetResponse() //prepara o json 
                cResult := oAdapter:getJsonResponse() //pega o json 

                oRest:SetResponse(cResult)

            Else 
                nError          := oAdapter:getCode()
                cError          := oAdapter:getMessage()

                jResp           := jsonObject():new()
                
                jresp['error']  := cError
                oRest:setFault(jresp:toJson())

            Endif 
    catch err 
        
        cError          := err:errorstack 

        jResp           := jsonObject():new()
        jresp['error']  := cError

        oRest:setFault(jresp:toJson())
        
    endtry

    if lRPC
        rpcClearEnv()
    endif
Return .T.
