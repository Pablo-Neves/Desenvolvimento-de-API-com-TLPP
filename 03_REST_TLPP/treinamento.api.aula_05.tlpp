#include 'totvs.ch'
#include 'tlpp-core.th'

NAMESPACE treinamento.api

class aula_05 from FwAdapterBaseV2

    public method new() constructor 

    @get('/treinamento/list/fornecedores')
    public method lista_fornecedores() as logical 

    @post('/treinamento/fornecedores/new')
    public method incluir_fornecedor() as logical 

    @put('/treinamento/fornecedores/update')
    public method update_fornecedor() as logical 
end class 

method new() class aula_05 

return self 

Method update_fornecedor() class aula_05

 Local lRPC          as logical
    Local jBodyReq      as json 
    Local aDados        as array 
    Local nOpc          as numeric 
    Local cNome         as character 
    Local cNomeRed      as character 
    Local cCGC          as character 
    Local cEnd          as character 
    Local cBairro       as character 
    Local cCidade       as character 
    Local cEstado       as character 
    Local cEmail        as character 
    Local cTelefone     as character 
    Local cCodMun       as character 
    Local cTipoPes      as character 
    local cCodigo       as character
    local cLoja         as character

    Private lMsErroAuto as logical 
    Private err         as object 

    If type('cEmpAnt') <> 'C'
        rpcSetEnv('99','01')
        lRPC := .T.
    Endif

    try 

        
        jBodyReq:= JsonObject():new()
        jBodyReq:fromJson(oRest:getBodyRequest())

        cCodigo     := jBodyReq['codigo']
        cloja       := jBodyReq['loja']
        cNome       := jBodyReq['nome']
        cNomeRed    := jBodyReq['nome_fantasia']
        cTipoPes    := jBodyReq['tipo']
        cCGC        := jBodyReq['cgc']
        cEnd        := jBodyReq['endereco']
        cBairro     := jBodyReq['bairro']
        cCidade     := jBodyReq['cidade']
        cEstado     := jBodyReq['estado']
        cEmail      := jBodyReq['email']
        cTelefone   := jBodyReq['telefone']

        SA2->(DbSetOrder(1),DbSeek(xFilial(alias()+cCodigo+cLoja)))

        If .not. SA2->(found())

            err := errorClass():new()
            err:description:= 'FORNECEDOR NAO ENCONTRADO!!'

            throw err 
        endif 

        cCgc         := strtran(strtran(strtran(Ccgc,'.' ,''), '-'   ,''),'/','')
        cTelefone    :=strtran(strtran(strtran(strtran(cTelefone," ", ""),"-",""),"(",""),")","")
        cCodMun      := Posicione("CC2",4,xFilial("CC2") + cEstado + cCidade,"CC2_CODMUN")


        aDados := {{"A2_COD"            , cCodigo           , Nil},;
                    {"A2_LOJA"          , cloja             , Nil},;
                    {"A2_NOME"          , cNome             , Nil},;
                    {"A2_TIPO"          , cTipoPes          , Nil},;
                    {"A2_CGC"           , cCgc              , Nil},;
                    {"A2_NREDUZ"        , cNomeRed          , Nil},;
                    {"A2_END"           , cEnd              , Nil},;
                    {"A2_BAIRRO"        , cBairro           , Nil},;
                    {"A2_EST"           , cEstado           , Nil},;
                    {"A2_COD_MUN"       , cCodMun           , Nil},;
                    {"A2_MUN"           , cCidade           , Nil},;
                    {"A2_EMAIL"         , cEmail            , Nil},;
                    {"A2_TEL"           , cTelefone         , Nil}}
        
        nOpc   := 4

        lMsErroAuto := .F.
        msExecAuto({|x,y| mata020(x,y)},aDados,nOpc)

        If lMsErroAuto
            mostraErro('\data\','erro_sa2.txt')
            cError := memoread('\data\erro_sa2.txt')

            err := errorClass():new()
            err:description := cError

            throw err
        Endif 

        jResp := JsonObject():new()
        jResp['codigo']         := SA2->A2_COD
        jResp['loja']           := SA2->A2_LOJA
        jResp['nome']           := AllTrim(SA2->A2_NOME)
        jResp['status']         := "ATUALIZAÇÃO COM SUCESSO!!"

        oRest:SetResponse(jResp:toJson())
    catch err 

        cError := err:description

        
        jResp           := jsonObject():new()
        jresp['error']  := cError

        oRest:setFault(jResp:toJson())

    endtry

    if lRPC
        rpcClearEnv()
    endif

Return .T.


Method incluir_fornecedor() class aula_05

    Local lRPC          as logical
    Local jBodyReq      as json 
    Local aDados        as array 
    Local nOpc          as numeric 
    Local cNome         as character 
    Local cNomeRed      as character 
    Local cCGC          as character 
    Local cEnd          as character 
    Local cBairro       as character 
    Local cCidade       as character 
    Local cEstado       as character 
    Local cEmail        as character 
    Local cTelefone     as character 
    Local cCodMun       as character 
    Local cTipoPes      as character 

    Private lMsErroAuto as logical 
    Private err         as object 

    If type('cEmpAnt') <> 'C'
        rpcSetEnv('99','01')
        lRPC := .T.
    Endif

    try 

        
        jBodyReq:= JsonObject():new()
        jBodyReq:fromJson(oRest:getBodyRequest())

        cNome       := jBodyReq['nome']
        cNomeRed    := jBodyReq['nome_fantasia']
        cTipoPes    := jBodyReq['tipo']
        cCGC        := jBodyReq['cgc']
        cEnd        := jBodyReq['endereco']
        cBairro     := jBodyReq['bairro']
        cCidade     := jBodyReq['cidade']
        cEstado     := jBodyReq['estado']
        cEmail      := jBodyReq['email']
        cTelefone   := jBodyReq['telefone']

        cCgc         := strtran(strtran(strtran(Ccgc,'.' ,''), '-'   ,''),'/','')
        cTelefone    :=strtran(strtran(strtran(strtran(cTelefone," ", ""),"-",""),"(",""),")","")
        cCodMun      := Posicione("CC2",4,xFilial("CC2") + cEstado + cCidade,"CC2_CODMUN")


        aDados := {{"A2_LOJA"           , "01"              , Nil},;
                    {"A2_NOME"          , cNome             , Nil},;
                    {"A2_TIPO"          , cTipoPes          , Nil},;
                    {"A2_CGC"           , cCgc              , Nil},;
                    {"A2_NREDUZ"        , cNomeRed          , Nil},;
                    {"A2_END"           , cEnd              , Nil},;
                    {"A2_BAIRRO"        , cBairro           , Nil},;
                    {"A2_EST"           , cEstado           , Nil},;
                    {"A2_COD_MUN"       , cCodMun           , Nil},;
                    {"A2_MUN"           , cCidade           , Nil},;
                    {"A2_EMAIL"         , cEmail            , Nil},;
                    {"A2_TEL"           , cTelefone         , Nil}}
        
        nOpc   := 3

        lMsErroAuto := .F.
        msExecAuto({|x,y| mata020(x,y)},aDados,nOpc)

        If lMsErroAuto
            mostraErro('\data\','erro_sa2.txt')
            cError := memoread('\data\erro_sa2.txt')

            err := errorClass():new()
            err:description := cError

            throw err
        Endif 

        jResp := JsonObject():new()
        jResp['codigo']         := SA2->A2_COD
        jResp['loja']           := SA2->A2_LOJA
        jResp['nome']           := AllTrim(SA2->A2_NOME)
        jResp['status']         := "INCLUIDO COM SUCESSO!!"

        oRest:SetResponse(jResp:toJson())
    catch err 

        cError := err:description

        
        jResp           := jsonObject():new()
        jresp['error']  := cError

        oRest:setFault(jResp:toJson())

    endtry

    if lRPC
        rpcClearEnv()
    endif

Return .T.

/*/{Protheus.doc} lista_fornecedores
    (Listar fornecedores utilizando classe)
    @author Pablo Neves
    @since 01/05/2024
    /*/
Method lista_fornecedores() class aula_05

    Local lRPC
    Local nError                as numeric 
    Local cError                as character 

    Local jQueryStr             as json    
    Local jResp                 as json 

    Local cSQL                  as character
    Local cWhere                as character
    Local cEstado               as character
    Local cCidade               as character 
    Local nSize                 as numeric  
    Local npage                 as numeric 
    Local cOrder                as character
    Local cSearch               as character

    If type('cEmpAnt') <> 'C'
        rpcSetEnv('99','01')
        lRPC := .T.
    Endif

    try 

        jQueryStr       :=  oRest:getQueryRequest() // recebe parametros passado pela api 

        cEstado                 := jQueryStr['estado']
        cCidade                 := jQueryStr['cidade']
        nSize                   := jQueryStr['pageSize']
        npage                   := jQueryStr['page']
        cOrder                  := jQueryStr['order']
        cSearch                 := jQueryStr['search']

        nSize                   := IIF(Empty(nSize),10,nSize)
        nPage                   := IIF(Empty(nPage),1,nPage)

        cSQL                    := " SELECT #QueryFields# FROM " + RetSqlName("SA2") + " SA2 "
        cSQL                    += CRLF + " WHERE #QueryWhere# "

        cWhere                  := " D_E_L_E_T_ = '' "

        If !Empty(cEstado)
            cWhere              += CRLF + " AND A2_ESTADO = '"    +   cEstado +   "' "
        EndIf

        If !Empty(cCidade)
            cWhere              += CRLF + " AND A2_MUN  LIKE '%"  +   cEstado +   "%' "
        EndIf

        If !Empty(cSearch)
            cWhere              += CRLF + " AND A2_NOME LIKE '%"  +   cSearch +   "%' ""
        Endif 

        _Super:new('GET',.T.) // Chamando metodo construtor da superclasse 
        ::addMapFields('cod'         ,'A2_COD'       ,.T.,.T.,{'A2_COD','C',06,00},'SA2.A2_COD') // array preenchido apenas quando campo nao faz parte da SX3
        ::addMapFields('loja'        ,'A2_LOJA'      ,.T.) 
        ::addMapFields('nome'        ,'A2_NOME'      ,.T.) 
        ::addMapFields('fantasia'    ,'A2_NREDUZ'    ,.T.) 
        ::addMapFields('endereco'    ,'A2_END'       ,.T.)

        ::setQuery(cSQL)
        ::setWhere(cWhere)
        ::setPageSize(nSize)
        ::setPage(nPage)
        ::setOrder(cOrder)

        If ::execute()

            ::fillGetResponse()
            oRest:SetResponse(::getJsonResponse())
        Else 

            nError              := ::getCode()
            cError              := ::getMessage()

            jResp               := JsonObject():new()
            jResp['error']      := cError 

            oRest:setFault(jResp:toJson())

        Endif 
    catch err 

        cError          := err:errorstack 

        jResp           := jsonObject():new()
        jresp['error']  := cError

        oRest:setFault(jResp:toJson())

    endtry

    if lRPC
        rpcClearEnv()
    endif
    
Return .T.

